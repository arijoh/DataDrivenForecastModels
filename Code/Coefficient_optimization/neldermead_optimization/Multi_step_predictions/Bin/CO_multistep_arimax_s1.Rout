
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> 
> cores <- as.numeric(Sys.getenv('LSB_DJOB_NUMPROC'))
> setwd("/zhome/6e/9/133731/Desktop/Thesis/Thesis")
> #cores = parallel::detectCores()
> source("Code/Coefficient optimization/Multi step predictions/HPC/meta_optim.R")
> 
> 
> 
> ##################### Reading in data ##################### 
> s1_training <-  read.csv("Data/Training data/s1_training.txt", header = TRUE, sep = "\t")
> s1 <- s1_training$Value
> s1_wwIndex <- read.csv("Data/Training data/s1_WW_training.txt", header = TRUE, sep = "\t")
> Regressor <-  read.csv("Data/Training data/d_training.txt", header = TRUE, sep = "\t")
> Regressor <- Regressor$Value
> 
> ##################### Parameters ##################### 
> MAX <- 8
> #x <- as.data.frame(rbind(c(4,2,4)))
> x <- expand.grid(0:MAX, 0:2, 0:MAX)
> colnames(x) <- c("p", "d", "q")
> 
> ##################### Optimization for Dammning (station 1) ##################### 
> 
> ## training data and observed data are the same but ts is modified within functions before calculating the residuals
> ts <- s1 
> observed <- s1
> wwIndex <- s1_wwIndex$Flag
> 
> system.time(
+   CO_s1 <- parallel::mclapply(1:nrow(x), function(i){
+     temp <- as.matrix(x[i,])
+     temp <- c(temp[1], temp[2], temp[3])
+     start_time <- Sys.time()
+     results <- meta_optim(temp, external_regressor = TRUE)
+     end_time <- Sys.time()
+     time_taken <- end_time - start_time
+     print(paste("Order: ", "(", temp[1], ", ", temp[2], ", ", temp[3], ")", " takes ", signif(time_taken, 4), " seconds to optimize", sep = ""))
+   }, mc.cores = cores, mc.allow.recursive = TRUE, mc.preschedule=FALSE)
+ )
[1] "No parameters to optimize for"
[1] "No parameters to optimize for"
Warning message:
In optim(par = startpars, fn = compute_arime_mse, order = orders,  :
  one-dimensional optimization by Nelder-Mead is unreliable:
use "Brent" or optimize() directly
[1] "Order: (2, 1, 0) takes 16.1 seconds to optimize"
[1] "Order: (1, 0, 0) takes 48.92 seconds to optimize"
[1] "Order: (3, 1, 0) takes 36.26 seconds to optimize"
[1] "Order: (1, 1, 0) takes 54.21 seconds to optimize"
[1] "Order: (5, 0, 0) takes 59.2 seconds to optimize"
[1] "Order: (2, 0, 0) takes 1.087 seconds to optimize"
[1] "Order: (6, 0, 0) takes 1.336 seconds to optimize"
[1] "No parameters to optimize for"
Warning message:
In optim(par = startpars, fn = compute_arime_mse, order = orders,  :
  one-dimensional optimization by Nelder-Mead is unreliable:
use "Brent" or optimize() directly
[1] "Order: (1, 2, 0) takes 13.3 seconds to optimize"
[1] "Order: (6, 1, 0) takes 52.89 seconds to optimize"
[1] "Order: (2, 2, 0) takes 25.49 seconds to optimize"
[1] "Order: (4, 1, 0) takes 1.378 seconds to optimize"
[1] "Order: (3, 0, 0) takes 2.873 seconds to optimize"
[1] "Order: (5, 2, 0) takes 44.15 seconds to optimize"
[1] "Order: (3, 2, 0) takes 1.788 seconds to optimize"
[1] "Order: (6, 2, 0) takes 45.76 seconds to optimize"
[1] "Order: (5, 1, 0) takes 3.259 seconds to optimize"
[1] "Order: (1, 0, 1) takes 3.285 seconds to optimize"
[1] "Order: (4, 2, 0) takes 5.576 seconds to optimize"
[1] "Order: (4, 0, 0) takes 8.876 seconds to optimize"
[1] "Order: (2, 0, 1) takes 1.593 seconds to optimize"
[1] "Order: (7, 0, 0) takes 9.571 seconds to optimize"
[1] "Order: (0, 0, 1) takes 7.267 seconds to optimize"
[1] "Order: (7, 1, 0) takes 10.25 seconds to optimize"
[1] "Order: (8, 2, 0) takes 7.914 seconds to optimize"
[1] "Order: (8, 1, 0) takes 10.69 seconds to optimize"
[1] "Order: (0, 1, 1) takes 1.23 seconds to optimize"
[1] "Order: (1, 1, 1) takes 2.268 seconds to optimize"
[1] "Order: (6, 0, 1) takes 4.48 seconds to optimize"
[1] "Order: (8, 0, 1) takes 4.717 seconds to optimize"
[1] "Order: (8, 0, 0) takes 16.32 seconds to optimize"
[1] "Order: (7, 0, 1) takes 6.77 seconds to optimize"
[1] "Order: (2, 1, 1) takes 6.291 seconds to optimize"
[1] "Order: (7, 2, 0) takes 16.23 seconds to optimize"
[1] "Order: (0, 2, 1) takes 1.511 seconds to optimize"
[1] "Order: (3, 0, 1) takes 14.08 seconds to optimize"
[1] "Order: (1, 2, 1) takes 1.876 seconds to optimize"
[1] "Order: (4, 0, 1) takes 20.36 seconds to optimize"
[1] "Order: (5, 0, 1) takes 24.39 seconds to optimize"
[1] "Order: (2, 2, 1) takes 12.31 seconds to optimize"
[1] "Order: (3, 1, 1) takes 51.4 seconds to optimize"
[1] "Order: (3, 2, 1) takes 1.29 seconds to optimize"
[1] "Order: (6, 2, 1) takes 1.155 seconds to optimize"
[1] "Order: (0, 0, 2) takes 3.586 seconds to optimize"
[1] "Order: (1, 0, 2) takes 41.48 seconds to optimize"
[1] "Order: (4, 2, 1) takes 1.434 seconds to optimize"
[1] "Order: (4, 1, 1) takes 1.79 seconds to optimize"
[1] "Order: (2, 0, 2) takes 15.09 seconds to optimize"
[1] "Order: (5, 0, 2) takes 4.291 seconds to optimize"
[1] "Order: (4, 0, 2) takes 12.67 seconds to optimize"
[1] "Order: (7, 0, 2) takes 32.23 seconds to optimize"
[1] "Order: (3, 0, 2) takes 30.92 seconds to optimize"
[1] "Order: (0, 1, 2) takes 4.927 seconds to optimize"
[1] "Order: (5, 1, 1) takes 2.297 seconds to optimize"
[1] "Order: (1, 1, 2) takes 8.907 seconds to optimize"
[1] "Order: (8, 1, 1) takes 2.442 seconds to optimize"
[1] "Order: (8, 0, 2) takes 55.42 seconds to optimize"
[1] "Order: (2, 1, 2) takes 48.28 seconds to optimize"
[1] "Order: (6, 0, 2) takes 1.316 seconds to optimize"
[1] "Order: (3, 1, 2) takes 59.85 seconds to optimize"
[1] "Order: (6, 1, 1) takes 3.773 seconds to optimize"
[1] "Order: (0, 2, 2) takes 3.914 seconds to optimize"
[1] "Order: (7, 2, 1) takes 3.316 seconds to optimize"
[1] "Order: (1, 2, 2) takes 20.3 seconds to optimize"
[1] "Order: (2, 2, 2) takes 1.205 seconds to optimize"
[1] "Order: (4, 1, 2) takes 3.679 seconds to optimize"
[1] "Order: (3, 2, 2) takes 2.522 seconds to optimize"
[1] "Order: (5, 1, 2) takes 4.192 seconds to optimize"
[1] "Order: (4, 2, 2) takes 2.074 seconds to optimize"
[1] "Order: (8, 1, 2) takes 4.199 seconds to optimize"
[1] "Order: (0, 0, 3) takes 13.62 seconds to optimize"
[1] "Order: (1, 0, 3) takes 1.452 seconds to optimize"
[1] "Order: (2, 0, 3) takes 15.23 seconds to optimize"
[1] "Order: (3, 0, 3) takes 7.945 seconds to optimize"
[1] "Order: (5, 2, 2) takes 2.055 seconds to optimize"
[1] "Order: (4, 0, 3) takes 21.73 seconds to optimize"
[1] "Order: (5, 0, 3) takes 10.03 seconds to optimize"
[1] "Order: (7, 2, 2) takes 1.564 seconds to optimize"
[1] "Order: (7, 0, 3) takes 22.5 seconds to optimize"
[1] "Order: (8, 0, 3) takes 8.174 seconds to optimize"
[1] "Order: (0, 1, 3) takes 5 seconds to optimize"
[1] "Order: (1, 1, 3) takes 11.82 seconds to optimize"
[1] "Order: (6, 2, 2) takes 2.646 seconds to optimize"
[1] "Order: (5, 2, 1) takes 9.171 seconds to optimize"
[1] "Order: (2, 1, 3) takes 44.69 seconds to optimize"
[1] "Order: (6, 0, 3) takes 1.471 seconds to optimize"
[1] "Order: (5, 1, 3) takes 1.681 seconds to optimize"
[1] "Order: (4, 1, 3) takes 2.269 seconds to optimize"
[1] "Order: (0, 2, 3) takes 6.44 seconds to optimize"
[1] "Order: (1, 2, 3) takes 19.89 seconds to optimize"
[1] "Order: (2, 2, 3) takes 18.05 seconds to optimize"
[1] "Order: (3, 2, 3) takes 16.86 seconds to optimize"
[1] "Order: (3, 1, 3) takes 4.045 seconds to optimize"
[1] "Order: (7, 1, 1) takes 16.91 seconds to optimize"
[1] "Order: (6, 1, 2) takes 13.98 seconds to optimize"
[1] "Order: (8, 2, 1) takes 15.74 seconds to optimize"
[1] "Order: (7, 2, 3) takes 3.973 seconds to optimize"
[1] "Order: (0, 0, 4) takes 2.9 seconds to optimize"
[1] "Order: (1, 0, 4) takes 1.091 seconds to optimize"
[1] "Order: (2, 0, 4) takes 2.607 seconds to optimize"
[1] "Order: (3, 0, 4) takes 45.1 seconds to optimize"
[1] "Order: (4, 0, 4) takes 47.54 seconds to optimize"
[1] "Order: (5, 0, 4) takes 25.65 seconds to optimize"
[1] "Order: (7, 1, 2) takes 17.01 seconds to optimize"
[1] "Order: (6, 0, 4) takes 1.847 seconds to optimize"
[1] "Order: (7, 0, 4) takes 40.26 seconds to optimize"
[1] "Order: (8, 0, 4) takes 12.73 seconds to optimize"
[1] "Order: (0, 1, 4) takes 11.95 seconds to optimize"
[1] "Order: (1, 1, 4) takes 13.82 seconds to optimize"
[1] "Order: (6, 1, 3) takes 11.71 seconds to optimize"
[1] "Order: (8, 2, 2) takes 14.4 seconds to optimize"
[1] "Order: (2, 1, 4) takes 52.94 seconds to optimize"
[1] "Order: (6, 1, 4) takes 24.86 seconds to optimize"
[1] "Order: (7, 1, 3) takes 14.4 seconds to optimize"
[1] "Order: (3, 1, 4) takes 4.182 seconds to optimize"
[1] "Order: (0, 2, 4) takes 29 seconds to optimize"
[1] "Order: (5, 2, 3) takes 13.09 seconds to optimize"
[1] "Order: (1, 2, 4) takes 24.96 seconds to optimize"
[1] "Order: (4, 2, 3) takes 14.12 seconds to optimize"
[1] "Order: (2, 2, 4) takes 1.389 seconds to optimize"
[1] "Order: (8, 1, 3) takes 16.46 seconds to optimize"
[1] "Order: (3, 2, 4) takes 1.668 seconds to optimize"
[1] "Order: (4, 1, 4) takes 6.779 seconds to optimize"
[1] "Order: (6, 2, 3) takes 11.54 seconds to optimize"
[1] "Order: (0, 0, 5) takes 52.45 seconds to optimize"
[1] "Order: (4, 2, 4) takes 2.633 seconds to optimize"
[1] "Order: (1, 0, 5) takes 6.259 seconds to optimize"
[1] "Order: (8, 2, 3) takes 12.46 seconds to optimize"
[1] "Order: (2, 0, 5) takes 24.47 seconds to optimize"
[1] "Order: (4, 0, 5) takes 39.55 seconds to optimize"
[1] "Order: (5, 0, 5) takes 41.47 seconds to optimize"
[1] "Order: (6, 0, 5) takes 23.39 seconds to optimize"
[1] "Order: (8, 0, 5) takes 4.165 seconds to optimize"
[1] "Order: (3, 0, 5) takes 1.74 seconds to optimize"
[1] "Order: (1, 1, 5) takes 14.8 seconds to optimize"
[1] "Order: (5, 2, 4) takes 4.173 seconds to optimize"
[1] "Order: (7, 0, 5) takes 1.276 seconds to optimize"
[1] "Order: (2, 1, 5) takes 38.56 seconds to optimize"
[1] "Order: (4, 1, 5) takes 19.31 seconds to optimize"
[1] "Order: (0, 1, 5) takes 1.381 seconds to optimize"
[1] "Order: (5, 1, 4) takes 11.58 seconds to optimize"
[1] "Order: (3, 1, 5) takes 3.846 seconds to optimize"
[1] "Order: (0, 2, 5) takes 6.143 seconds to optimize"
[1] "Order: (8, 1, 4) takes 12.39 seconds to optimize"
[1] "Order: (7, 1, 4) takes 14.34 seconds to optimize"
[1] "Order: (1, 2, 5) takes 1.659 seconds to optimize"
[1] "Order: (2, 2, 5) takes 1.275 seconds to optimize"
[1] "Order: (8, 1, 5) takes 7.345 seconds to optimize"
[1] "Order: (6, 2, 4) takes 13.26 seconds to optimize"
[1] "Order: (8, 2, 4) takes 14.36 seconds to optimize"
[1] "Order: (7, 2, 4) takes 16.69 seconds to optimize"
[1] "Order: (0, 0, 6) takes 32.98 seconds to optimize"
[1] "Order: (1, 0, 6) takes 7.84 seconds to optimize"
[1] "Order: (2, 0, 6) takes 2.574 seconds to optimize"
[1] "Order: (3, 0, 6) takes 11.77 seconds to optimize"
[1] "Order: (4, 0, 6) takes 9.335 seconds to optimize"
[1] "Order: (5, 0, 6) takes 27.31 seconds to optimize"
[1] "Order: (3, 2, 5) takes 9.737 seconds to optimize"
[1] "Order: (7, 0, 6) takes 33.32 seconds to optimize"
[1] "Order: (8, 0, 6) takes 30.11 seconds to optimize"
[1] "Order: (6, 0, 6) takes 22.87 seconds to optimize"
[1] "Order: (6, 1, 5) takes 14.43 seconds to optimize"
[1] "Order: (5, 1, 5) takes 14.44 seconds to optimize"
[1] "Order: (6, 2, 5) takes 5.968 seconds to optimize"
[1] "Order: (1, 1, 6) takes 18.57 seconds to optimize"
[1] "Order: (7, 1, 5) takes 14.84 seconds to optimize"
[1] "Order: (0, 1, 6) takes 39.76 seconds to optimize"
interrupts suspended; signal ignoredThere were 50 or more warnings (use warnings() to see the first 50)There were 50 or more warnings (use warnings() to see the first 50)There were 50 or more warnings (use warnings() to see the first 50)There were 50 or more warnings (use warnings() to see the first 50)interrupts suspended; signal ignored



There were 50 or more warnings (use warnings() to see the first 50)
There were 50 or more warnings (use warnings() to see the first 50)
There were 50 or more warnings (use warnings() to see the first 50)
There were 50 or more warnings (use warnings() to see the first 50)
There were 50 or more warnings (use warnings() to see the first 50)
Timing stopped at: 1.645e+06 2991 1.728e+05
Execution halted
